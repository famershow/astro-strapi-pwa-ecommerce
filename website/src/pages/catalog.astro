---
import ProductCard from "../components/ProductCard.astro";
import ProductInfoWindow from "../components/Product.astro";
import Layout from "../layouts/Layout.astro";

if (!Astro.cookies.has("jwt")) {
  return Astro.redirect("/login");
}

// Define the interface for the Product
interface Product {
  id: number;
  title: string;
  price: number;
  image: string;
}

let products: Product[] = [];

try {
  // Fetch products from Strapi API
  const response = await fetch(
    "http://192.168.56.10:1337/api/products?populate=image",
    {
      method: "GET",
      headers: {
        Authorization: "Bearer " + Astro.cookies.get("jwt")?.value,
      },
    }
  );

  const data = await response.json();

  // Transform the data to match the Product interface
  products = data.data.map((item: any) => ({
    id: item.id,
    title: item.attributes.title,
    price: item.attributes.price,
    image:
      "http://192.168.56.10:1337" +
        item.attributes.image?.data[0]?.attributes?.formats?.thumbnail?.url ||
      "https://picsum.photos/200", // Default image if none exists
  }));
} catch (error) {
  console.error("Failed to fetch products:", error);
}

let selectedProduct = null;

// Function to show product info in a modal
const handleShowProductInfo = (product: Product): void => {
  selectedProduct = product;
};

// Function to close product info modal
const handleCloseProductInfo = (): void => {
  selectedProduct = null;
};
---

<Layout>
  <h1>Product Catalog</h1>

  <div class="product-catalog">
    {
      products.length > 0 ? (
        products.map((product) => <ProductCard product={product} />)
      ) : (
        <p>No products available</p>
      )
    }
  </div>

  {
    selectedProduct && (
      <ProductInfoWindow
        product={selectedProduct}
        onClose={handleCloseProductInfo}
      />
    )
  }
</Layout>

<script>
  // Client-side script to handle adding to cart
  const handleAddToCart = async (id: number) => {
    try {
      // Safely retrieve the JWT token from cookies
      const jwtCookie = document.cookie
        .split("; ")
        .find((row) => row.startsWith("jwt"));
      const jwtToken = jwtCookie ? jwtCookie.split("=")[1] : null; // Check if jwtCookie is not undefined

      if (!jwtToken) {
        console.error("JWT token not found");
        return; // Stop execution if no JWT is found
      }

      const response = await fetch(
        "http://192.168.56.10:1337/api/users/1?populate=cart", // Assuming user 1 is logged in
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + jwtToken,
          },
          body: JSON.stringify({
            cart: {
              connect: [id], // Add the selected product ID to the cart
            },
          }),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to add product to cart");
      }

      console.log("Product added to cart!");
    } catch (error) {
      console.error(error);
    }
  };

  // Assign the `onAddToCart` handler to product card elements
  document.querySelectorAll(".btn-add").forEach((button) => {
    button.addEventListener("click", () => {
      debugger;
      const productId = button.getAttribute("data-product-id");
      if (productId) {
        handleAddToCart(parseInt(productId, 10));
      } else {
        console.error("Product ID is null or undefined");
      }
    });
  });
</script>

<style>
  .product-catalog {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
  }
</style>
